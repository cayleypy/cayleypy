import torch

from cayleypy import prepare_graph


def test_all_transpositions():
    graph = prepare_graph("all_transpositions", n=3)
    assert torch.equal(graph.generators, torch.tensor([[1, 0, 2], [2, 1, 0], [0, 2, 1]]))
    assert graph.generator_names == ["(0,1)", "(0,2)", "(1,2)"]

    graph = prepare_graph("all_transpositions", n=20)
    assert graph.n_generators == (20 * 19) // 2


def test_pancake():
    graph = prepare_graph("pancake", n=6)
    assert graph.n_generators == 5
    assert graph.generator_names == ["R1", "R2", "R3", "R4", "R5"]
    assert torch.equal(graph.generators, torch.tensor(
        [[1, 0, 2, 3, 4, 5], [2, 1, 0, 3, 4, 5], [3, 2, 1, 0, 4, 5], [4, 3, 2, 1, 0, 5], [5, 4, 3, 2, 1, 0]]
    ))


def test_full_reversals():
    graph = prepare_graph("full_reversals", n=4)
    assert graph.n_generators == 6
    assert graph.generator_names == ["R[0..1]", "R[0..2]", "R[0..3]", "R[1..2]", "R[1..3]", "R[2..3]"]
    assert torch.equal(graph.generators, torch.tensor([
        [1, 0, 2, 3], [2, 1, 0, 3], [3, 2, 1, 0], [0, 2, 1, 3], [0, 3, 2, 1], [0, 1, 3, 2]
    ]))


def test_cube333():
    graph = prepare_graph("cube_3/3/3_12gensQTM")
    assert graph.n_generators == 12

    graph = prepare_graph("cube_3/3/3_18gensHTM")
    assert graph.n_generators == 18

def test_cube_nnn_qstm():
    graph = prepare_graph("cube_n/n/n_gensQSTM", n=2)
    assert graph.n_generators == 6
    assert graph.generator_names == ['f0', 'f1', 'r0', 'r1', 'd0', 'd1']
    assert torch.equal(graph.generators, torch.tensor([
        [0, 1, 19, 17, 6, 4, 7, 5, 2, 9, 3, 11, 12, 13, 14, 15, 16, 20, 18, 21, 10, 8, 22, 23],
        [18, 16, 2, 3, 4, 5, 6, 7, 8, 0, 10, 1, 13, 15, 12, 14, 22, 17, 23, 19, 20, 21, 11, 9],
        [0, 5, 2, 7, 4, 21, 6, 23, 10, 8, 11, 9, 3, 13, 1, 15, 16, 17, 18, 19, 20, 14, 22, 12],
        [4, 1, 6, 3, 20, 5, 22, 7, 8, 9, 10, 11, 12, 2, 14, 0, 17, 19, 16, 18, 15, 21, 13, 23],
        [0, 1, 2, 3, 4, 5, 18, 19, 8, 9, 6, 7, 12, 13, 10, 11, 16, 17, 14, 15, 22, 20, 23, 21],
        [1, 3, 0, 2, 16, 17, 6, 7, 4, 5, 10, 11, 8, 9, 14, 15, 12, 13, 18, 19, 20, 21, 22, 23]
    ]))
    graph = prepare_graph("cube_n/n/n_gensQSTM", n=3)
    assert graph.n_generators == 9
    assert graph.generator_names == ["f0", "f1", "f2", "r0", "r1", "r2", "d0", "d1", "d2"]
    assert torch.equal(graph.generators, torch.tensor([
        [0, 1, 2, 3, 4, 5, 44, 41, 38, 15, 12, 9, 16, 13, 10, 17, 14, 11, 6, 19, 20, 7, 22, 23, 8, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 45, 39, 40, 46, 42, 43, 47, 24, 21, 18, 48, 49, 50, 51, 52, 53],
        [0, 1, 2, 43, 40, 37, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 3, 20, 21, 4, 23, 24, 5, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 48, 38, 39, 49, 41, 42, 50, 44, 45, 46, 47, 25, 22, 19, 51, 52, 53],
        [42, 39, 36, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 0, 21, 22, 1, 24, 25, 2, 29, 32, 35, 28, 31, 34, 27, 30, 33, 51, 37, 38, 52, 40, 41, 53, 43, 44, 45, 46, 47, 48, 49, 50, 26, 23, 20],
        [0, 1, 11, 3, 4, 14, 6, 7, 17, 9, 10, 47, 12, 13, 50, 15, 16, 53, 24, 21, 18, 25, 22, 19, 26, 23, 20, 8, 28, 29, 5, 31, 32, 2, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 33, 48, 49, 30, 51, 52, 27],
        [0, 10, 2, 3, 13, 5, 6, 16, 8, 9, 46, 11, 12, 49, 14, 15, 52, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 7, 29, 30, 4, 32, 33, 1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 34, 47, 48, 31, 50, 51, 28, 53],
        [9, 1, 2, 12, 4, 5, 15, 7, 8, 45, 10, 11, 48, 13, 14, 51, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 6, 30, 31, 3, 33, 34, 0, 38, 41, 44, 37, 40, 43, 36, 39, 42, 35, 46, 47, 32, 49, 50, 29, 52, 53],
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 42, 43, 44, 18, 19, 20, 21, 22, 23, 15, 16, 17, 27, 28, 29, 30, 31, 32, 24, 25, 26, 36, 37, 38, 39, 40, 41, 33, 34, 35, 51, 48, 45, 52, 49, 46, 53, 50, 47],
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 39, 40, 41, 15, 16, 17, 18, 19, 20, 12, 13, 14, 24, 25, 26, 27, 28, 29, 21, 22, 23, 33, 34, 35, 36, 37, 38, 30, 31, 32, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53],
        [2, 5, 8, 1, 4, 7, 0, 3, 6, 36, 37, 38, 12, 13, 14, 15, 16, 17, 9, 10, 11, 21, 22, 23, 24, 25, 26, 18, 19, 20, 30, 31, 32, 33, 34, 35, 27, 28, 29, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53]
    ]))

def test_globeAB():
    graph = prepare_graph("globeA/B", A=3, B=4)
    assert graph.n_generators == 12
    assert graph.generator_names == ["r0", "r1", "r2", "r3", "f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7"]
    assert torch.equal(graph.generators, torch.tensor([
        [1, 2, 3, 4, 5, 6, 7, 0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 
        [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 8, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31],
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 16, 24, 25, 26, 27, 28, 29, 30, 31],
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 24],
        [27, 26, 25, 24, 4, 5, 6, 7, 19, 18, 17, 16, 12, 13, 14, 15, 11, 10, 9, 8, 20, 21, 22, 23, 3, 2, 1, 0, 28, 29, 30, 31],
        [0, 28, 27, 26, 25, 5, 6, 7, 8, 20, 19, 18, 17, 13, 14, 15, 16, 12, 11, 10, 9, 21, 22, 23, 24, 4, 3, 2, 1, 29, 30, 31], 
        [0, 1, 29, 28, 27, 26, 6, 7, 8, 9, 21, 20, 19, 18, 14, 15, 16, 17, 13, 12, 11, 10, 22, 23, 24, 25, 5, 4, 3, 2, 30, 31],
        [0, 1, 2, 30, 29, 28, 27, 7, 8, 9, 10, 22, 21, 20, 19, 15, 16, 17, 18, 14, 13, 12, 11, 23, 24, 25, 26, 6, 5, 4, 3, 31],
        [0, 1, 2, 3, 31, 30, 29, 28, 8, 9, 10, 11, 23, 22, 21, 20, 16, 17, 18, 19, 15, 14, 13, 12, 24, 25, 26, 27, 7, 6, 5, 4], 
        [29, 1, 2, 3, 4, 24, 31, 30, 21, 9, 10, 11, 12, 16, 23, 22, 13, 17, 18, 19, 20, 8, 15, 14, 5, 25, 26, 27, 28, 0, 7, 6],
        [31, 30, 2, 3, 4, 5, 25, 24, 23, 22, 10, 11, 12, 13, 17, 16, 15, 14, 18, 19, 20, 21, 9, 8, 7, 6, 26, 27, 28, 29, 1, 0],
        [25, 24, 31, 3, 4, 5, 6, 26, 17, 16, 23, 11, 12, 13, 14, 18, 9, 8, 15, 19, 20, 21, 22, 10, 1, 0, 7, 27, 28, 29, 30, 2]
            ]))
    graph = prepare_graph("globeA/B", A=2, B=6)
    assert graph.n_generators == 15
    assert graph.generator_names == ["r0", "r1", "r2", "f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "f10", "f11"]
    assert torch.equal(graph.generators, torch.tensor([
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35],
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 12, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35],
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 24],
        [29, 28, 27, 26, 25, 24, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 5, 4, 3, 2, 1, 0, 30, 31, 32, 33, 34, 35],
        [0, 30, 29, 28, 27, 26, 25, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 6, 5, 4, 3, 2, 1, 31, 32, 33, 34, 35],
        [0, 1, 31, 30, 29, 28, 27, 26, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 7, 6, 5, 4, 3, 2, 32, 33, 34, 35],
        [0, 1, 2, 32, 31, 30, 29, 28, 27, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 8, 7, 6, 5, 4, 3, 33, 34, 35],
        [0, 1, 2, 3, 33, 32, 31, 30, 29, 28, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 9, 8, 7, 6, 5, 4, 34, 35],
        [0, 1, 2, 3, 4, 34, 33, 32, 31, 30, 29, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 10, 9, 8, 7, 6, 5, 35],
        [0, 1, 2, 3, 4, 5, 35, 34, 33, 32, 31, 30, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 11, 10, 9, 8, 7, 6],
        [31, 1, 2, 3, 4, 5, 6, 24, 35, 34, 33, 32, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 7, 25, 26, 27, 28, 29, 30, 0, 11, 10, 9, 8], 
        [33, 32, 2, 3, 4, 5, 6, 7, 25, 24, 35, 34, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 9, 8, 26, 27, 28, 29, 30, 31, 1, 0, 11, 10],
        [35, 34, 33, 3, 4, 5, 6, 7, 8, 26, 25, 24, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 11, 10, 9, 27, 28, 29, 30, 31, 32, 2, 1, 0],
        [25, 24, 35, 34, 4, 5, 6, 7, 8, 9, 27, 26, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 1, 0, 11, 10, 28, 29, 30, 31, 32, 33, 3, 2],
        [27, 26, 25, 24, 35, 5, 6, 7, 8, 9, 10, 28, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 3, 2, 1, 0, 11, 29, 30, 31, 32, 33, 34, 4]
            ]))
