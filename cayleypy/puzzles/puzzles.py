from .cube import rubik_cube_qstm, rubik_cube_htm, rubik_cube_qtm
from .globe import globe_puzzle
from .hungarian_rings import hungarian_rings_generators
from .moves import MINI_PYRAMORPHIX_ALLOWED_MOVES, PYRAMINX_MOVES, STARMINX_MOVES, MEGAMINX_MOVES
from ..cayley_graph_def import CayleyGraphDef
from ..permutation_utils import inverse_permutation


class Puzzles:
    """Definitions of graphs describing various puzzles."""

    @staticmethod
    def rubik_cube(cube_size: int, metric: str) -> CayleyGraphDef:
        """Cayley graph for NxNxN Rubik's cube.

        :param cube_size: - Size of the cube (N).
        :param metric: - metric defining what counts as one move, one of:
          - "QSTM" - Quarter Slice Turn Metric.
          - "QTM" - Quarter Turn Metric (only supported for 2x2x2 and 3x3x3).
          - "HTM" - Half Turn Metric (only supported for 2x2x2 and 3x3x3).
        """
        if metric == "QSTM":
            return rubik_cube_qstm(cube_size)
        elif metric == "QTM":
            return rubik_cube_qtm(cube_size)
        elif metric == "HTM":
            return rubik_cube_htm(cube_size)
        else:
            raise ValueError(f"Unknown metric: {metric}")

    @staticmethod
    def globe_puzzle(a: int, b: int) -> CayleyGraphDef:
        """Cayley graph for Globe puzzle group, a + 1 cycle and 2b order 2 generators."""
        return globe_puzzle(a, b)

    @staticmethod
    def hungarian_rings(n: int) -> CayleyGraphDef:
        """Cayley graph for S_n (n>=4), generated by rotating two rings in both directions.

        For each ring structure and their intersection it has four generators.
        """
        assert n % 2 == 0
        ring_size = (n + 2) // 2
        assert ring_size >= 4
        generators, generator_names = hungarian_rings_generators(ring_size=ring_size)
        return CayleyGraphDef.create(generators, central_state=list(range(n)), generator_names=generator_names)

    @staticmethod
    def mini_pyramorphix() -> CayleyGraphDef:
        """Cayley graph for a subgroup of S_24, acting on 24 titles.

        It is generated by 17 moves inspired by a simplified version of the Pyramorphix puzzle. Moves are based on
        overlapping 2- and 3-cycles and result in a symmetric, undirected graph.
        Order of the graph 24, degree 17, order of the group 288.
        """
        generator_names = list(MINI_PYRAMORPHIX_ALLOWED_MOVES.keys())
        generators = [MINI_PYRAMORPHIX_ALLOWED_MOVES[k] for k in generator_names]
        central_state = list(range(len(generators[0])))
        return CayleyGraphDef.create(generators, central_state=central_state, generator_names=generator_names)

    @staticmethod
    def pyraminx() -> CayleyGraphDef:
        """Cayley graph for a subgroup of S_36 acting on 36 tiles.

        It is generated by 8 elements inspired by Pyraminx puzzle.
        4 elements represent rotations of the tetrahedron tips, while 4 others -- rotations of its base layers.
        """
        generator_names = []
        generators = []
        for move_id, perm in PYRAMINX_MOVES.items():
            generators += [perm, inverse_permutation(perm)]
            generator_names += [move_id, move_id + "_inv"]
        central_state = list(range(len(generators[0])))
        return CayleyGraphDef.create(generators, central_state=central_state, generator_names=generator_names)

    @staticmethod
    def starminx() -> CayleyGraphDef:
        """Cayley graph generated by 20 moves of Starminx puzzle.

        Each move is a rotation of a corner, centered around one of the dodecahedronâ€™s pentagonal faces (face centres
        never move). A single turn corresponds to a set of disjoint 3-cycles, each on one triangular sticker.
        """
        generator_names = list(STARMINX_MOVES.keys())
        generators = [STARMINX_MOVES[k] for k in generator_names]
        inversed_names = [f"inv_{k}" for k in generator_names]
        generator_names.extend(inversed_names)
        inversed = [inverse_permutation(p) for p in generators]
        generators.extend(inversed)
        central_state = list(range(len(generators[0])))
        return CayleyGraphDef.create(generators, central_state=central_state, generator_names=generator_names)

    @staticmethod
    def megaminx():
        """Cayley graph for the Megaminx puzzle.

        See https://en.wikipedia.org/wiki/Megaminx.
        """
        generator_names = []
        generators = []
        for move_id, perm in MEGAMINX_MOVES.items():
            generators += [perm, inverse_permutation(perm)]
            generator_names += [move_id, move_id + "_inv"]
        central_state = list(range(len(generators[0])))
        return CayleyGraphDef.create(generators, central_state=central_state, generator_names=generator_names)
